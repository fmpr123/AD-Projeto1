/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.distance;

import com.microsoft.azure.sdk.iot.device.*;
import com.google.gson.Gson;
import com.mycompany.events.DirectMethodCallback;
import com.mycompany.events.DirectMethodStatusCallback;
import com.mycompany.events.EventCallback;

import java.io.*;
import java.net.URISyntaxException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;
import java.util.concurrent.Executors;
import java.util.concurrent.ExecutorService;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Turma A
 */
public class Device extends javax.swing.JFrame {

    private static String connString = "HostName=FR-AD.azure-devices.net;DeviceId=MyJavaDevice;SharedAccessKey=ZBH58UvrQUmB3Eb8A8K0nznzM3goljIpD0P9+BjSGQ8=";
    private static IotHubClientProtocol protocol = IotHubClientProtocol.MQTT;
    private static DeviceClient client;

    /**
     * Creates new form Device
     */
    public Device() throws URISyntaxException {
        initComponents();

        client = new DeviceClient(connString, protocol);
        try {
            client.open();
            client.subscribeToDeviceMethod(new DirectMethodCallback(), null, new DirectMethodStatusCallback(), null);
        } catch (IOException ex) {
            Logger.getLogger(Device.class.getName()).log(Level.SEVERE, null, ex);
        }

        simulateDevice();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Device.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Device.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Device.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Device.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Device().setVisible(true);
                } catch (URISyntaxException ex) {
                    Logger.getLogger(Device.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    private void simulateDevice() {
        try {
            // Initialize the simulated telemetry.
            //double minTemperature = 20;
            //Random rand = new Random();

            while (true) {
                Date date = new Date();
                SimpleDateFormat formatter = new SimpleDateFormat("EEE MMM dd HH:mm:ss yyyy");

                //double currentTemperature = minTemperature + rand.nextDouble() * 15;
                
                TelemetryDataPoint telemetryDataPoint = new TelemetryDataPoint();
                
                telemetryDataPoint.distance = 10; //Mudar para a distancia que o device tem atualmente
                telemetryDataPoint.currentDate = formatter.format(date);
                telemetryDataPoint.alertStatus=false;

                // Add the telemetry to the message body as JSON.
                String msgStr = telemetryDataPoint.serialize();
                Message msg = new Message(msgStr);
                
                // Add a custom application property to the message.
                // An IoT hub can filter on these properties without access to the message body.
                //msg.setProperty("temperatureAlert", (currentTemperature > 30) ? "true" : "false");

                System.out.println("Sending message: " + msgStr);

                Object lockobj = new Object();

                // Send the message.
                EventCallback callback = new EventCallback();
                client.sendEventAsync(msg, callback, lockobj);

                synchronized (lockobj) {
                    lockobj.wait();
                }
                Thread.sleep(1000);
            }
        } catch (InterruptedException e) {
            System.out.println("Finished.");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
